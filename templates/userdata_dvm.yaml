#cloud-config
version: v1
users:
  - name: local
  - name: ${vm_user_name}
    gecos: ${vm_user_displayname}
    passwd: ${vm_user_password}
    groups: sudo
    lock_passwd: false
    shell: /bin/bash
    ssh_authorized_keys: ${vm_user_ssh_key}
apt:
  sources:
    ansible:
      source: deb https://ppa.launchpadcontent.net/ansible/ansible/ubuntu/ jammy main
      key: |
         -----BEGIN PGP PUBLIC KEY BLOCK-----
         Comment: Hostname: 
         Version: Hockeypuck 2.1.0-189-g15ebf24
         
         xsFNBFOXbTABEADKLcY3MYZyHIiCEu8cQ+0UzxZolTYZf8xZ06/d8xzUW/UBPTLV
         x/40IzWJEZU87GCYVXUhdYXECrFQKQOOEWQswBxOt26/g0nIrU0edZ9cCZ9o9+ZO
         sKDcScWNxWeclLr2+YHdmX9eph+2p+zIPmhNJaaWV6/bSo1fBi7ganZFRAc13zO8
         jtQsYyIeoAFwjt1vbk9CifdFhEchRVbwvZYhZDWfBZjhZ15UOunjo47gEkpK0PsW
         HY5N3/c75pGMwMTCjHMKno6KFzhdKLaz/QgbNnpy1aMkA/LITeU6Pgg6iqofrSY3
         Fx73MCAb8EEytvSV/65wztKzexHjGYxhm5ygoET5tPyXciX0+XzojkZAHzUEeT5z
         4kgL6OLyn+JQAyRDNnOJEkYmvwQveZuUjsYUkgc5DJdg6w7lTgQHWObOENpXls3B
         DnphA4DJyc0PQODCxdSZo4ZXMLn5lE/0qvAJ6g/wntY/ee/vRKwy9iDMOWQvihTI
         Y/L70/TnE4qZdaNbOJEvW59LT6GBTrcU1MX2fS5hU/mQa2CNixSVZG98rba3tfNa
         LDDNqivkcxtWryEWd0giBzzUS+MhtxhHm77YgxNVyyFn8bXb25/W+Jq+VvWWx2KD
         3ZwVD37X8wIBRLVozoH0jHVW7jKTnf2z+D6FCM+pVlm8zV1upXbHbdaRqwARAQAB
         zR9MYXVuY2hwYWQgUFBBIGZvciBBbnNpYmxlLCBJbmMuwsF4BBMBAgAiBQJTl20w
         AhsDBgsJCAcDAgYVCAIJCgsEFgIDAQIeAQIXgAAKCRCTxKP9e7nDZwzdD/9yFq+3
         ptLyWP1JN3RXsvTIJLhhjOqMMJCOocV0G3slHeUtdIDmvd2RaS8PeFNSd9QFbUzk
         a7pBXec3a7kgEVorty2/+cZSpEVHT26oAbJnoH7E1YGii8bbnk9LqOCF/nLpasEq
         PKqtVzXz+vGB7G0ox8qmRm6JynrMeLBftYemxJ8e4fii6APJxE6FPz/AvgcN3BtB
         guseFwcga6lGcmp0JLofGhTbejfS9dW9bnCFJBtRfzUVd+Cb8aYuzV5zgCJgqOBJ
         Hf0L6xDwn8UuzRfi0MWzEskuC/KxUJqVHMuTaLdrSeP1/czompetbsSHTfDklf/p
         4EbSM9VqZFiKr17we0LdigAEv2JnL2Qj0oN3eRNU0sDJ3kZvh5qhnteNgSRM/el0
         Sly+34CRZzX25vd+pOTgwK6VFx3wvWfqn3pVNT9ASNalhogFXuBY2ukYJaiUTPsS
         R4+KHiD3eIhWyayBGP+GRvGb5dVC29k4CjLvQM9lISmZrrxGmMGoV9S1dh7siZYE
         CaVW0nKI95d6bBHaKH1g5HJ7NEsVTwf8LRY/FFpLsEPVw4HNVqqqwhuJnSW70WQ3
         blh0RIX/+z9hAla+M0kix7r0lS89ZBdTgwPuiCrkPRpoxi06ah/Q62uP3ZN4+dew
         1sBZdaC9kaKdOOWTqArVnaPObQgUUJFhY9wUsA==
         =uKv4
         -----END PGP PUBLIC KEY BLOCK-----
        
  conf: |
    Acquire {
      Retries "60"
    }
    DPkg {
      Lock {
        Timeout "60"
      }
    }

package_update: true
packages_upgrade: true
packages:
  - net-tools
  - nmap
  - git
  - tree
  - openssh-server
  - sshpass
  - software-properties-common
  - ansible
#  - ansible-core

write_files:
  - content: |
      # first hosts_entry - always vcloud hostname/ip
      ${hosts_entry0}
      ${hosts_entry1} 

    path: /etc/hosts
    append: true
  - content: |
      [haproxy]
      
      [dvm]
      ${dvm_name}

      [masters]

      [workers]   

      [k8s-nodes:children]
      masters
      workers

      [k8s-nodes:vars]
      ansible_connection=ssh
      ansible_user=${os_admin_username}
      ansible_ssh_pass=${ansible_ssh_pass}
      ansible_sudo_pass=${ansible_ssh_pass}

      [dvm:vars]
      ansible_connection=local
      ansible_user=${os_admin_username}
      ansible_sudo_pass=${ansible_ssh_pass}

    path: /K8s-inventory
  - content: |
      #!/bin/bash
      export ip_net=$(echo ${master0_ip} | cut -d '.' -f1-3)
      export lb0_ip_4=$(echo ${lb0_ip} | cut -d '.' -f4)
      export master0_ip_4=$(echo ${master0_ip} | cut -d '.' -f4)
      export worker0_ip_4=$(($(echo ${master0_ip} | cut -d '.' -f4)+3))
      
      
      for (( m=0;m<=$((${masters_count}-1));m++ ));do ip=$((master0_ip_4 + m)); echo "$ip_net.$ip  ${master_pref}-$m" >> /etc/hosts; done
      for (( w=0;w<=$((${workers_count}-1));w++ ));do ip=$((worker0_ip_4 + w)); echo "$ip_net.$ip  ${worker_pref}-$w" >> /etc/hosts; done
      for (( l=0;l<=$((${lb_count}-1));l++ ));do ip=$((lb0_ip_4 + l)); echo "$ip_net.$ip  ${lb_pref}-$l" >> /etc/hosts; done
   
    path:  /add_hosts_records.sh
    permissions: "0744"
  - content: |
      #!/bin/bash
      for (( i=$((${masters_count}-1));i>=0;i-- ));do sed -i "/\[masters\]/a ${master_pref}-$i" /K8s-inventory ;done
      for (( i=$((${workers_count}-1));i>=0;i-- ));do sed -i "/\[workers\]/a ${worker_pref}-$i" /K8s-inventory ;done
      for (( i=$((${lb_count}-1));i>=0;i-- ));do sed -i "/\[haproxy\]/a ${lb_pref}-$i" /K8s-inventory ;done
      
    path: /add_inventory_records.sh
    permissions: "0744"
  - content: |
      #!/bin/bash
      ansible-playbook /${ansible_repo_name}/${ansible_playbook} -e  \
           docker_mirror='${docker_mirror}'
           def_dns='${def_dns}'
           env_dns1='${env_dns1}'
           env_dns2='${env_dns2}'
           master0_ip='${master0_ip}'
           master1_ip='${master1_ip}'
           master2_ip='${master2_ip}'
           workers_count='${workers_count}'
           masters_count='${masters_count}'
           worker0_name='${worker0_name}' 
           vsphere_ip='${vsphere_ip}'
           vsphere_fqdn='${vsphere_fqdn}'
           cloud_type='${cloud_type}'
           os_admin_username='${os_admin_username}'
           os_nic1_name='${os_nic1_name}'
           k8s_ver='${k8s_ver}'
           k8s_version_short='${k8s_version_short}'
           calico_version='${calico_version}'
           k8s_cluster_name='${k8s_cluster_name}'
           helm_version='${helm_version}'
           ingress_controller_nodeport_http='${ingress_controller_nodeport_http}'
           ingress_controller_nodeport_https='${ingress_controller_nodeport_https}'
           k8s_controlPlane_Endpoint='${k8s_controlPlane_Endpoint}'
           k8s_service_subnet='${k8s_service_subnet}'
           k8s_pod_subnet='${k8s_pod_subnet}'
           calico_network_cidr_blocksize='${calico_network_cidr_blocksize}'
           k8s_cluster_id='${k8s_cluster_id}'
           sc_storage_policy_name='${sc_storage_policy_name}'
           sc_name='${sc_name}'
           ingress_ext_fqdn='${ingress_ext_fqdn}'
           alertmgr_telegram_receiver_name='${alertmgr_telegram_receiver_name}'
           alertmgr_telegram_bot_token='${alertmgr_telegram_bot_token}'
           alertmgr_telegram_chatid='${alertmgr_telegram_chatid}'
           tenant_cluster_ro_rolename='${tenant_cluster_ro_rolename}'
           tenant_ns_default='${tenant_ns_default}'
           tenant_k8s_admin_username='${tenant_k8s_admin_username}'
           tenant_orgname='${tenant_orgname}'
           tenant_orgname_orgunit='${tenant_orgname_orgunit}'
           tenant_emailaddress='${tenant_emailaddress}'
           certificate_validity='${certificate_validity}'"
          # crontab -r
    path: /ansible_starter.sh
  - content: |                                                                                                                                                           
      @reboot /k8s-kubeadm-ansible/ansible_starter.sh
    path: /var/spool/cron/root  

runcmd:
#  - add-apt-repository --yes --update ppa:ansible/ansible
  - /add_hosts_records.sh
  - /add_inventory_records.sh
  - git clone -b "${ansible_repo_branch}" "${ansible_repo_url}" -v
  - git clone https://github.com/nokogerra/ubuntu-ansible-basic-roles.git
  - cp -r /ubuntu-ansible-basic-roles/*  ${ansible_repo_name}/roles/
  - cp /ansible_starter.sh  ${ansible_repo_name}
  - sed -i 's/PasswordAuthentication no/#PasswordAuthentication no/' /etc/ssh/sshd_config
  - [ systemctl, daemon-reload ]
  - [ systemctl, restart, --no-block, ssh.service ]
  - [ ansible-galaxy, collection, install, kubernetes.core ]
#  - chmod u+x /k8s-kubeadm-ansible/ansible_starter.sh
#  - /usr/bin/crontab /var/spool/cron/root
  - cd ${ansible_repo_name}
  - ansible-galaxy install -r requirements.yml -p roles/
  - ansible-playbook "/${ansible_repo_name}/${ansible_playbook}"
     -e "docker_mirror=${docker_mirror}
       def_dns=${def_dns}
       env_dns1=${env_dns1}
       env_dns2=${env_dns2}
       master0_ip=${master0_ip}
       master1_ip=${master1_ip}
       master2_ip=${master2_ip}
       workers_count=${workers_count}
       masters_count=${masters_count}
       worker0_name=${worker0_name}
       vsphere_ip=${vsphere_ip}
       vsphere_fqdn=${vsphere_fqdn}
       vsphere_server=${vsphere_server}
       vsphere_user=${vsphere_user}
       vsphere_password=${vsphere_password}
       vsphere_csi_driver_version=${vsphere_csi_driver_version}
       dcname=${dcname}
       cloud_type=${cloud_type}
       os_admin_username=${os_admin_username}
       os_nic1_name=${os_nic1_name}
       k8s_cluster_name=${k8s_cluster_name}
       helm_version=${helm_version}
       ingress_controller_nodeport_http=${ingress_controller_nodeport_http}
       ingress_controller_nodeport_https=${ingress_controller_nodeport_https}
       k8s_ver=${k8s_ver}
       k8s_version_short=${k8s_version_short}
       calico_version=${calico_version}
       k8s_controlPlane_Endpoint=${k8s_controlPlane_Endpoint}
       k8s_service_subnet=${k8s_service_subnet}
       k8s_pod_subnet=${k8s_pod_subnet}
       calico_network_cidr_blocksize=${calico_network_cidr_blocksize}
       k8s_cluster_id=${k8s_cluster_id}
       sc_storage_policy_name=${sc_storage_policy_name}
       sc_name=${sc_name}
       ingress_ext_fqdn=${ingress_ext_fqdn}
       alertmgr_telegram_receiver_name=${alertmgr_telegram_receiver_name}
       alertmgr_telegram_bot_token=${alertmgr_telegram_bot_token}
       alertmgr_telegram_chatid=${alertmgr_telegram_chatid}
       tenant_cluster_ro_rolename=${tenant_cluster_ro_rolename}
       tenant_ns_default=${tenant_ns_default}
       tenant_k8s_admin_username=${tenant_k8s_admin_username}
       tenant_orgname=${tenant_orgname}
       tenant_orgname_orgunit=${tenant_orgname_orgunit}
       tenant_emailaddress=${tenant_emailaddress}
       certificate_validity=${certificate_validity}"
  #- ansible-playbook reboot_hosts_before_disks_remap.yaml
  #- ansible-playbook prepare_hosts_disks.yaml


 
